import type { AndExpression, AnnotationPathExpression, ApplyExpression, BoolExpression, Collection, DateExpression, DecimalExpression, EnumMemberExpression, EqExpression, FloatExpression, GeExpression, GtExpression, IfExpression, IntExpression, LeExpression, LtExpression, NavigationPropertyPathExpression, NeExpression, NotExpression, NullExpression, OrExpression, PathExpression, PropertyPathExpression, StringExpression, DoubleExpression } from '@sap-ux/vocabularies-types';
/**
 * all attribute or node names that can provide a value representing an Expression (according to typescript definition)
 *  - each entry has the corresponding primitive JS type as string value
 */
export declare const expressionNames: Record<string, string>;
/**
 *
 * @param value - Node.
 * @returns True if node is an expression.
 */
export declare function isExpression(value: Collection[number]): value is StringExpression | PropertyPathExpression | PathExpression | NavigationPropertyPathExpression | AnnotationPathExpression | EnumMemberExpression | BoolExpression | DecimalExpression | DoubleExpression | DateExpression | IntExpression | FloatExpression | ApplyExpression | NullExpression | IfExpression | AndExpression | OrExpression | EqExpression | NotExpression | NeExpression | GtExpression | GeExpression | LtExpression | LeExpression;
//# sourceMappingURL=expressions.d.ts.map