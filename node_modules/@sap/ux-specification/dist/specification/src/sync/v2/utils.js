"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getManifestPathFromPagePath = getManifestPathFromPagePath;
exports.getManifestPropertyByPath = getManifestPropertyByPath;
/**
 * This file contains helper functions for generic schema handling.
 * The functionality is implicitly tested by the more complex unit-tests for generic schema generation and generic import in test-folder unit/genericSchemaHandling.
 */
const ux_specification_types_1 = require("@sap/ux-specification-types");
/**
 * Get the path inside the manifest to the definition of a specific page.
 *
 * @param pagePath - path to the page as described in option b) of type AccessorPath
 * @param toSettings - If this property is true the path to the settings object of the specified page definition is returned (this is actually the sub-object containing the most meaningful information)
 * @param suffix - can be used to create a path that points to an even deeper sub-object
 * @returns the specified path as described in option a) of type AccessorPath
 */
function getManifestPathFromPagePath(pagePath, toSettings = true, suffix = []) {
    const manifestPath = [ux_specification_types_1.ManifestSection.generic];
    pagePath.forEach(function (page) {
        manifestPath.push('pages');
        manifestPath.push(page);
    });
    if (toSettings) {
        manifestPath.push('component');
        manifestPath.push('settings');
    }
    return manifestPath.concat(suffix);
}
/**
 * Helper function to extract information from the manifest.
 *
 * @param manifest - the manifest containing the information
 * @param manifestPath - pointer to the object in the manifest containing the property to be checked
 * @param property - the property below the specified path that should be extracted. If it is faulty, no value will be extracted.
 * @returns - hasPath: information whether the specified path can be followed in the manifest and the target is an object (which is not null)
 * - value: The value of the specified property if the path can be followed and the corresponding object possesses the specified property, otherwise undefined
 * - parent: the not-null object found at the specified path (parent object of the property), otherwise undefined. Note that modifying the properties of this object will also change manifest.
 */
function getManifestPropertyByPath(manifest, manifestPath, property) {
    let manifestSection = manifest; // Current position in the manifest when stepping down
    const hasPath = 
    // Traverse down the manifest (in manifestSection) step by step along the specified path
    manifestPath.every(function (accessor) {
        if (!manifestSection ||
            typeof manifestSection !== 'object' ||
            (Array.isArray(manifestSection) && typeof accessor !== 'number')) {
            // In order to perform another step down our current position must be a (not-null) object.
            // If this is even an array we only accept numbers as accessors.
            // When this condition is not fulfilled, we stop stepping down.
            return false;
        }
        manifestSection = manifestSection[accessor]; // execute the step down
        return true;
    }) &&
        typeof manifestSection === 'object' &&
        manifestSection !== null; // Finally check whether we still have reached a not-null object
    return {
        hasPath,
        value: hasPath && property ? manifestSection[property] : undefined,
        parent: hasPath ? manifestSection : undefined
    };
}
//# sourceMappingURL=utils.js.map