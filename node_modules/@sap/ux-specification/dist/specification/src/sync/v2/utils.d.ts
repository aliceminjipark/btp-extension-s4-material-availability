import type { AccessorPath, Manifest } from '@sap/ux-specification-types';
/**
 * Get the path inside the manifest to the definition of a specific page.
 *
 * @param pagePath - path to the page as described in option b) of type AccessorPath
 * @param toSettings - If this property is true the path to the settings object of the specified page definition is returned (this is actually the sub-object containing the most meaningful information)
 * @param suffix - can be used to create a path that points to an even deeper sub-object
 * @returns the specified path as described in option a) of type AccessorPath
 */
export declare function getManifestPathFromPagePath(pagePath: AccessorPath, toSettings?: boolean, suffix?: AccessorPath): AccessorPath;
/**
 * Helper function to extract information from the manifest.
 *
 * @param manifest - the manifest containing the information
 * @param manifestPath - pointer to the object in the manifest containing the property to be checked
 * @param property - the property below the specified path that should be extracted. If it is faulty, no value will be extracted.
 * @returns - hasPath: information whether the specified path can be followed in the manifest and the target is an object (which is not null)
 * - value: The value of the specified property if the path can be followed and the corresponding object possesses the specified property, otherwise undefined
 * - parent: the not-null object found at the specified path (parent object of the property), otherwise undefined. Note that modifying the properties of this object will also change manifest.
 */
export declare function getManifestPropertyByPath(manifest: Manifest, manifestPath: AccessorPath, property?: string): {
    hasPath: boolean;
    value: unknown;
    parent: object | undefined;
};
//# sourceMappingURL=utils.d.ts.map